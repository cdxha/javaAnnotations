# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:

- main

pool:
  name: Fortify
steps:
# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: 'java -jar /opt/fortify-api-client-latest.jar create -n $(Build.Repository.Name) -v $(Build.Repository.Name)'
# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       var=$(/opt/sca/bin/scancentral -sscurl $(var.sscurl) -ssctoken $(var.ssctoken) start -bt none -upload --application $(Build.Repository.Name) --application-version $(Build.SourceBranchName) -uptoken $(var.uptoken)) && jobtoken=${var:(-36)} && echo jobtoken: $jobtoken
#       while true; do
#           jobStatus=$(java -jar /opt/fortify-api-client-latest.jar checkCloudscanStatus -jt $jobtoken)
#           echo jobStatus $jobStatus
#           if expr ${jobStatus//[[:space:]]/} : ".*COMPLETED*."; then
#               echo "Cloudscan Job completed."
#               sleep 10
#               break
#           elif expr ${jobStatus//[[:space:]]/} : ".*ERROR.*" || expr ${jobStatus//[[:space:]]/} : ".*FAILED.*" || expr ${jobStatus//[[:space:]]/} : ".*FAULTED.*" || expr ${jobStatus//[[:space:]]/} : ".*CANCELED.*"; then
#               echo "Erro ao executar o scan. Current status: $jobStatus. Consulte os logs do Fortify para obter mais detalhes."
#               exit
#           else
#               echo "Waiting job to process. Current status: $jobStatus"
#               sleep 30
#           fi
#       done
# - task: CmdLine@2
#   displayName: 'Debricked scan'
#   inputs:
#     script: |
#       echo "starting scan debricked"
#       env > env.list
#       # docker run -v $HOME:$HOME --env DEBRICKED_TOKEN_3=$(VAR_DEBRICKED) --entrypoint "/azure-devops.sh" debricked/debricked-scan:latest
#       docker run -t --rm -v $(System.DefaultWorkingDirectory):/data debricked/debricked-cli debricked:scan henriqueaguiar22@hotmail.com debrickedt3cn0l0gi4! $(Build.Repository.Name) $(Build.BuildNumber) null cli
- task: Bash@3
  inputs:
     targetType: 'inline'
     script: |  
      # var=$(/opt/sca/bin/scancentral -sscurl $(var.sscurl) -ssctoken $(var.ssctoken) start -bt none -upload --application  $(Build.Repository.Name) --application-version  $(Build.SourceBranchName) -uptoken $(var.uptoken)) && jobtoken=${var:(-36)} && echo jobtoken: $jobtoken
      # while true; do
      #   jobStatus=$(java -Djdk.callerSensitive=true -jar /opt/fortify-api-client/fortify-api-client-latest.jar checkCloudscanStatus -jt $jobtoken | grep -v "sun.reflect.Reflection.getCallerClass")    
      #   jobStatus=$(echo ${jobStatus} | cut -d\[ -f3 | cut -d\] -f1 )
      #   echo "jobStatus: ${jobStatus}"
      #     if [[ "${jobStatus}" =~ "COMPLETED" ]]; then
      #       echo "Cloudscan Job completed."
      #       sleep 10
      #       break
      #     elif [[ "${jobStatus}" =~ "ERROR|FAULTED|CANCELED|FAILED" ]]; then
      #       echo "Erro ao executar o scan. Current status: $jobStatus. Consulte os logs do Fortify para obter mais detalhes."
      #       exit
      #     else
      #       echo "Aguardando o processamento status: ${jobStatus}"
      #       sleep 20
      #     fi
      # done
      # java -jar /opt/fortify-api-client/fortify-api-client-latest.jar waitArtifactProcess -n $(Build.Repository.Name) -v $(Build.SourceBranchName) | grep -v "sun.reflect.Reflection.getCallerClass" 
        if expr ${reportfortify//[[:space:]]/} : ".*0Criticas(Novas)*." "&" ${reportfortify//[[:space:]]/} : ".*0Altas(Novas)*."; then
          echo "##vso[task.logissue type=success;] Analise Fortify SAST concluída com sucesso!"
        else
          echo "##vso[task.logissue type=error;] Error na Analise SAST encontrado problemas críticos de seguranca na análise Fortify /n Projeto:$(Build.Repository.Name) /n Branch:$(Build.SourceBranchName)"
        fi
